"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import clientprefundresponsedto as shared_clientprefundresponsedto
from ...models.shared import prefundrequestdto as shared_prefundrequestdto
from typing import Optional


@dataclasses.dataclass
class ClientPrefundRequestRequest:
    prefund_request_dto: shared_prefundrequestdto.PrefundRequestDTO = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""prefundRequestDTO"""
    client_hash_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'clientHashId', 'style': 'simple', 'explode': False }})
    r"""Unique client identifier generated and shared before API handshake."""
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-request-id', 'style': 'simple', 'explode': False }})
    r"""Enter a unique UUID value"""
    



@dataclasses.dataclass
class ClientPrefundRequestResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    client_prefund_response_dto: Optional[shared_clientprefundresponsedto.ClientPrefundResponseDTO] = dataclasses.field(default=None)
    r"""OK"""
    

