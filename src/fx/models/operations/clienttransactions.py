"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import clienttransactionsresponsedto as shared_clienttransactionsresponsedto
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ClientTransactionsSecurity:
    default: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})
    


class Order(str, Enum):
    r"""The sort order for the results."""
    ASC = 'ASC'
    DESC = 'DESC'

class Status(str, Enum):
    r"""This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API."""
    NULL = 'NULL'
    IN_PROGRESS = 'IN_PROGRESS'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    RFI_REQUESTED = 'RFI_REQUESTED'
    RFI_RESPONDED = 'RFI_RESPONDED'
    COMPLETED = 'COMPLETED'
    ERROR = 'ERROR'
    REJECT = 'REJECT'
    EXPIRED = 'EXPIRED'


@dataclasses.dataclass
class ClientTransactionsRequest:
    client_hash_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'clientHashId', 'style': 'simple', 'explode': False }})
    r"""Unique client identifier generated and shared before API handshake.
    >ℹ️ INFO 
    >Query parameters are optional. If query parameters are not passed then by default three months transactions will be returned.
    """
    auth_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'authCode', 'style': 'form', 'explode': True }})
    r"""This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value."""
    auth_currency: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'authCurrency', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)."""
    business_transaction: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'businessTransaction', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on businessTransaction flag."""
    card_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cardHashId', 'style': 'form', 'explode': True }})
    r"""This field can apply the filter based on the unique card identifier generated during new/add-on card issuance."""
    child_customer_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'childCustomerHashId', 'style': 'form', 'explode': True }})
    r"""This field contains the unique child customer identifier generated when new child customer created."""
    customer_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customerHashId', 'style': 'form', 'explode': True }})
    r"""Unique identifier generated with customer creation."""
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""End date for fetching the transaction details. The format for endDate is YYYY-MM-DD."""
    mcc: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mcc', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on 4-digit Merchant Category Codes."""
    merchant_categories: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantCategories', 'style': 'form', 'explode': True }})
    r"""This parameter describes the merchant's type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc."""
    merchant_city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantCity', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on the merchant city field."""
    merchant_countries: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantCountries', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries."""
    merchant_country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantCountry', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on the merchant country field."""
    merchant_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantName', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on the merchant name field."""
    order: Optional[Order] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""The sort order for the results."""
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable.\nDefault page is 0."""
    payment_instrument_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'paymentInstrumentHashId', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on comma-separated paymentInstrumentHashId."""
    property: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'property', 'style': 'form', 'explode': True }})
    r"""Property"""
    settlement_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'settlementDate', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd."""
    settlement_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'settlementStatus', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API."""
    size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""This will decide the number of elements per page. Typical values can be 1-20."""
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""From date for fetching the transaction details. The format for startDate is YYYY-MM-DD."""
    status: Optional[Status] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API."""
    system_trace_audit_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'systemTraceAuditNumber', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on systemTraceAuditNumber."""
    tag_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagKey', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter."""
    tag_value: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagValue', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter."""
    transaction_currency: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transactionCurrency', 'style': 'form', 'explode': True }})
    r"""This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html)."""
    transactions_labels_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transactionsLabelsKey', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on transactionsLabelsKey."""
    transactions_labels_value: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transactionsLabelsValue', 'style': 'form', 'explode': True }})
    r"""This parameter can filter the transactions based on transactionsLabelsValue."""
    transaction_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transactionType', 'style': 'form', 'explode': True }})
    r"""This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types)."""
    wallet_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'walletHashId', 'style': 'form', 'explode': True }})
    r"""Unique wallet identifier generated simultaneously with customer creation."""
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-request-id', 'style': 'simple', 'explode': False }})
    r"""Enter a unique UUID value"""
    



@dataclasses.dataclass
class ClientTransactionsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    client_transactions_response_dto: Optional[shared_clienttransactionsresponsedto.ClientTransactionsResponseDTO] = dataclasses.field(default=None)
    r"""OK"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

