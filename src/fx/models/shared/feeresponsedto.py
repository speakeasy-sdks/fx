"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from fx import utils
from typing import Optional

class FeeResponseDTOFeeName(str, Enum):
    r"""This field contains the name of the fee or markup."""
    ATM_FEE = 'ATM_FEE'
    ECOM_FEE = 'ECOM_FEE'
    VIR_CARD_FEE = 'VIR_CARD_FEE'
    PLASTIC_FEE = 'PLASTIC_FEE'
    ADDON_CARD_FEE = 'ADDON_CARD_FEE'
    REPLACEMENT_FEE = 'REPLACEMENT_FEE'
    WALLET_REFUND_FEE = 'WALLET_REFUND_FEE'
    REMIT_BANK_FEE = 'REMIT_BANK_FEE'
    REMIT_BANK_FEE_SWIFT_BEN = 'REMIT_BANK_FEE_SWIFT_BEN'
    REMIT_BANK_FEE_SWIFT_OUR = 'REMIT_BANK_FEE_SWIFT_OUR'
    REMIT_BANK_FEE_SWIFT = 'REMIT_BANK_FEE_SWIFT'
    REMIT_CASH_FEE = 'REMIT_CASH_FEE'
    REMIT_WALLET_FEE = 'REMIT_WALLET_FEE'
    REMIT_CARD_FEE = 'REMIT_CARD_FEE'
    REMIT_PROXY_FEE = 'REMIT_PROXY_FEE'
    TRANSACTION_MARKUP = 'TRANSACTION_MARKUP'
    FX_MARKUP = 'FX_MARKUP'
    FX_MARKUP_AUTO_SWEEP = 'FX_MARKUP_AUTO_SWEEP'
    FX_MARKUP_AUTO_SWEEP_EOD = 'FX_MARKUP_AUTO_SWEEP_EOD'
    FX_MARKUP_AUTO_SWEEP_RECEIVE = 'FX_MARKUP_AUTO_SWEEP_RECEIVE'
    FX_MARKUP_LOCKANDHOLD_1 = 'FX_MARKUP_LOCKANDHOLD_1'
    INTERNATIONAL_ATM_FEE = 'INTERNATIONAL_ATM_FEE'
    ATM_DECLINE_FEE = 'ATM_DECLINE_FEE'
    NON_ATM_DECLINE_FEE = 'NON_ATM_DECLINE_FEE'
    ACCOUNT_OPENING_FEE = 'ACCOUNT_OPENING_FEE'
    ACCOUNT_MAINTENANCE_FEE = 'ACCOUNT_MAINTENANCE_FEE'
    ACCOUNT_INACTIVE_FEE = 'ACCOUNT_INACTIVE_FEE'
    P2_P_FEE = 'P2P_FEE'
    WALLET_CREDIT_THIRD_PARTY_FEE = 'WALLET_CREDIT_THIRD_PARTY_FEE'
    WALLET_CREDIT_OFFLINE_FEE = 'WALLET_CREDIT_OFFLINE_FEE'
    WALLET_CREDIT_CARD_FEE = 'WALLET_CREDIT_CARD_FEE'
    WALLET_CREDIT_DIRECT_DEBIT_FEE = 'WALLET_CREDIT_DIRECT_DEBIT_FEE'
    AUTO_SWEEP_FEE_EOD = 'AUTO_SWEEP_FEE_EOD'
    AUTO_SWEEP_FEE_RECEIVE = 'AUTO_SWEEP_FEE_RECEIVE'
    FX_MARKUP_SETTLE_2_DAYS = 'FX_MARKUP_SETTLE_2DAYS'
    FX_MARKUP_SETTLE_NEXTDAY = 'FX_MARKUP_SETTLE_NEXTDAY'
    FX_MARKUP_SETTLE_ENDOFDAY = 'FX_MARKUP_SETTLE_ENDOFDAY'
    FX_MARKUP_SETTLE_IMMEDIATE = 'FX_MARKUP_SETTLE_IMMEDIATE'
    FX_MARKUP_LOCK_5_MINS = 'FX_MARKUP_LOCK_5MINS'
    FX_MARKUP_LOCK_15_MINS = 'FX_MARKUP_LOCK_15MINS'
    FX_MARKUP_LOCK_1_HOUR = 'FX_MARKUP_LOCK_1HOUR'
    FX_MARKUP_LOCK_4_HOURS = 'FX_MARKUP_LOCK_4HOURS'
    FX_MARKUP_LOCK_8_HOURS = 'FX_MARKUP_LOCK_8HOURS'
    FX_MARKUP_LOCK_24_HOURS = 'FX_MARKUP_LOCK_24HOURS'
    FX_MARKUP_CANCELLATION = 'FX_MARKUP_CANCELLATION'
    FX_MARKUP_REVERSAL = 'FX_MARKUP_REVERSAL'
    DOMESTIC_LINKED_CARD_FEE = 'DOMESTIC_LINKED_CARD_FEE'

class FeeResponseDTOStatus(str, Enum):
    r"""This field contains the fee status and the possible values are:
    Active
    Inactive
    """
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    BLOCKED = 'BLOCKED'
    SUSPENDED = 'SUSPENDED'
    UPLOADED = 'UPLOADED'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    FAILED = 'FAILED'
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'
    PARTIALLY_SUCCESS = 'PARTIALLY SUCCESS'
    SYNC = 'SYNC'
    NOT_SYNC = 'NOT SYNC'
    PENDING = 'PENDING'
    REQUIRES_ACTION = 'REQUIRES_ACTION'
    CLEAR = 'CLEAR'
    DECLINED = 'DECLINED'
    ACCOUNT_BLOCKED = 'ACCOUNT_BLOCKED'
    AMOUNT_BLOCKED = 'AMOUNT_BLOCKED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FeeResponseDTO:
    auth_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authCurrency'), 'exclude': lambda f: f is None }})
    r"""This field contains the 3-letter [ISO-4217 authorization currency code](doc:currency-and-country-codes)."""
    fee_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeCurrency'), 'exclude': lambda f: f is None }})
    r"""This field contains the 3-letter [ISO-4217 fee currency code](doc:currency-and-country-codes)."""
    fee_name: Optional[FeeResponseDTOFeeName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeName'), 'exclude': lambda f: f is None }})
    r"""This field contains the name of the fee or markup."""
    fee_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeValue'), 'exclude': lambda f: f is None }})
    r"""This field contains the actual value of the fee. It can be an amount or percentage."""
    fixed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixed'), 'exclude': lambda f: f is None }})
    r"""This field determines if the fee is a fixed amount or a percentage. It is true for a fixed amount and false for a percentage."""
    slab_from: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slabFrom'), 'exclude': lambda f: f is None }})
    r"""This field contains the starting point of the slab of transaction amount on which the fee is applicable."""
    slab_to: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slabTo'), 'exclude': lambda f: f is None }})
    r"""This field contains the ending point of the slab of transaction amount on which the fee is applicable."""
    status: Optional[FeeResponseDTOStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""This field contains the fee status and the possible values are:
    Active
    Inactive
    """
    threshold_fee_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thresholdFeeValue'), 'exclude': lambda f: f is None }})
    r"""This field contains the value of the threshold fee. It can be fixed or percentage."""
    transaction_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionCurrency'), 'exclude': lambda f: f is None }})
    r"""This field contains the 3-letter [ISO-4217 transaction currency code](doc:currency-and-country-codes)."""
    

