"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import walletrfiattributeresponse as shared_walletrfiattributeresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from fx import utils
from typing import List, Optional

class TransactionRfiDetailsResponseRfiStatus(str, Enum):
    r"""This field contains Transaction RFI status."""
    NONE = 'NONE'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    ERROR = 'ERROR'
    REJECT = 'REJECT'
    EXPIRED = 'EXPIRED'
    RFI_REQUESTED = 'RFI_REQUESTED'
    RFI_RESPONDED = 'RFI_RESPONDED'
    UNKNOWN = 'UNKNOWN'
    INITIATED = 'INITIATED'
    PENDING = 'PENDING'
    CLEAR = 'CLEAR'
    CLOSED = 'CLOSED'

class TransactionRfiDetailsResponseTransactionEntityType(str, Enum):
    r"""This field contains the type of the transaction entity. The possible values are:
    DEBTOR
    CREDITOR
    """
    DEBTOR = 'DEBTOR'
    CREDITOR = 'CREDITOR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionRfiDetailsResponse:
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""This field contains the description of the RFI."""
    document_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentType'), 'exclude': lambda f: f is None }})
    r"""This field contains the type of the document if applicable, for example, POI, POA, etc."""
    mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory'), 'exclude': lambda f: f is None }})
    r"""This flag signifies if the RFI is mandatory or not."""
    remarks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remarks'), 'exclude': lambda f: f is None }})
    r"""This field contains the remarks provided while raising the RFI."""
    required_data: Optional[List[shared_walletrfiattributeresponse.WalletRfiAttributeResponse]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiredData'), 'exclude': lambda f: f is None }})
    r"""This array contains the required data for the RFI."""
    rfi_hash_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rfiHashId'), 'exclude': lambda f: f is None }})
    r"""This field contains the unique RFI hash ID."""
    rfi_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rfiId'), 'exclude': lambda f: f is None }})
    r"""This field contains the unique identifier for group of RFI raised for the customer transaction."""
    rfi_status: Optional[TransactionRfiDetailsResponseRfiStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rfiStatus'), 'exclude': lambda f: f is None }})
    r"""This field contains Transaction RFI status."""
    transaction_entity_type: Optional[TransactionRfiDetailsResponseTransactionEntityType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionEntityType'), 'exclude': lambda f: f is None }})
    r"""This field contains the type of the transaction entity. The possible values are:
    DEBTOR
    CREDITOR
    """
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""This field contains the type of RFI. It could be document or data."""
    

